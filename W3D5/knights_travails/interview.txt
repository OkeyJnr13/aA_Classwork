arr




product = 1
while n > 0 
    product *= (n % 10) 
    n /= 10
end
product = 24

sum = 0
while n > 0 
    sum += (n % 10) 
    n /= 10 
end
sum = 9

product - sum

Problem #2
​
Subtract the Product and Sum of Digits of an Integer
​
Given an integer number n, return the difference between the product of its digits and the sum of its digits.
 
​
Example 1:
​
Input: n = 234
Output: 15 
Explanation: 
Product of digits = 2 * 3 * 4 = 24 
Sum of digits = 2 + 3 + 4 = 9 
Result = 24 - 9 = 15
Example 2:
​
Input: n = 4421
Output: 21
Explanation: 
Product of digits = 4 * 4 * 2 * 1 = 32 
Sum of digits = 4 + 4 + 2 + 1 = 11 
Result = 32 - 11 = 21
 
​
Constraints:
​

nums = [8,1,2,2,3]
def count(arr)
    arr.map do |ele| #8
        arr.count do |ele2| [8,1,2,2,3]
            ele > ele2
        end 
    end 
end 
[4,0,1,1,3]




Problem #1
​
How Many Numbers Are Smaller Than the Current Number
​
Given the array nums, for each nums[i] find out how many numbers in the array are smaller than it. That is, for each nums[i] you have to count the number of valid j's such that j != i and nums[j] < nums[i].
​
Return the answer in an array.
​
 

​
Example 1:
​
Input: nums = [8,1,2,2,3]
Output: [4,0,1,1,3]
Explanation: 
For nums[0]=8 there exist four smaller numbers than it (1, 2, 2 and 3). 
For nums[1]=1 does not exist any smaller number than it.
For nums[2]=2 there exist one smaller number than it (1). 
For nums[3]=2 there exist one smaller number than it (1). 
For nums[4]=3 there exist three smaller numbers than it (1, 2 and 2).
Example 2:
​
Input: nums = [6,5,4,8]
Output: [2,1,0,3]
Example 3:
​
Input: nums = [7,7,7,7]
Output: [0,0,0,0]
 
​
Constraints:
​
2 <= nums.length <= 500
0 <= nums[i] <= 100
